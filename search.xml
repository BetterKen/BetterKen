<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>4.MySQL体系结构</title>
      <link href="/2020/02/15/4-Mysql%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2020/02/15/4-Mysql%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="4-1-Mysql整体结构图"><a href="#4-1-Mysql整体结构图" class="headerlink" title="4. 1 Mysql整体结构图"></a>4. 1 Mysql整体结构图</h2><p>下图是Mysql官方给出的结构图:</p><p><img src="http://mysql317.oss-cn-beijing.aliyuncs.com/Mysql%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="Mysql体系结构"></p><p>从上图可以发现Mysql由以下几部分组成</p><ul><li>客户端</li><li>连接层</li><li>SQL层</li><li>存储引擎层</li><li>文件系统</li><li>服务管理(非必须)</li></ul><h3 id="4-1-1-客户端"><a href="#4-1-1-客户端" class="headerlink" title="4.1.1 客户端"></a>4.1.1 客户端</h3><p>即Mysql提供给不同语言的API链接方式,支持的语言有很过Go,PHP,Java等等 没啥好说的哈</p><h3 id="4-1-2-连接层"><a href="#4-1-2-连接层" class="headerlink" title="4.1.2 连接层"></a>4.1.2 连接层</h3><p>主要负责以下功能:</p><ul><li>提供链接协议,两种: <code>socket连接&amp;TCP/IP连接</code></li><li>授权认证</li><li>提供专用的连接线程</li><li>最大连接数限制</li></ul><h3 id="4-1-3-SQL层"><a href="#4-1-3-SQL层" class="headerlink" title="4.1.3  SQL层"></a>4.1.3  SQL层</h3><p>主要负责以下功能:</p><ul><li>SQL语法检查</li><li>语义检查(DML,DCL,DQL,DTL)</li><li>权限判断</li><li>解析器:解析预处理,执行计划(是全表扫描还是走哪个索引)</li><li>优化分析器:帮我们选择最优的方案</li><li>执行器:执行SQL语句</li><li>查询缓存(QC)<ul><li>【注】这个不要开启,在许多情况下它会失效并且会拉低数据库性能</li><li>可以使用Redis来替代</li></ul></li></ul><h3 id="4-1-4-存储引擎层"><a href="#4-1-4-存储引擎层" class="headerlink" title="4.1.4 存储引擎层"></a>4.1.4 存储引擎层</h3><p>提供不同的存储引擎以供选择,类似于Linux的文件系统,和磁盘模块进行数据交互</p><p>我们可以通过show engine指令查看目前数据库支持的存储引擎</p><pre><code>[root@centos7-1 3306]# mysql -e&#39;show engines&#39;|awk &#39;{print $1}&#39;EngineCSVMRG_MYISAMMyISAM        ***BLACKHOLEPERFORMANCE_SCHEMAMEMORY          ARCHIVEInnoDB          *****FEDERATED</code></pre><p>经常提到的存储引擎有两个:</p><ul><li>InnoDB</li><li>MyISAM</li></ul><p>在早期使用的默认存储引擎为MyISAM,目前默认都是用InnoDB,他们之间的区别稍后会在存储引擎一篇中详细介绍</p><h3 id="4-1-5-文件系统"><a href="#4-1-5-文件系统" class="headerlink" title="4.1.5 文件系统"></a>4.1.5 文件系统</h3><p>用于存储数据文件和不同类型的日志</p><h2 id="4-2-MySQL文件结构"><a href="#4-2-MySQL文件结构" class="headerlink" title="4.2 MySQL文件结构"></a>4.2 MySQL文件结构</h2><p>目前我们的Mysql数据库下有以下几个库:</p><pre><code>mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || baseinfo           || mysql              || performance_schema || sys                || test               |+--------------------+6 rows in set (0.00 sec)</code></pre><p>我们查看MySQL的数据存储文件夹下会看到如下文件:</p><pre><code>[root@centos7-1 3306]# tree -L 1.├── auto.cnf├── baseinfo├── centos7-1.err├── centos7-1.pid├── ib_buffer_pool├── ibdata1├── ib_logfile0├── ib_logfile1├── ibtmp1├── mysql├── performance_schema├── sys└── test</code></pre><p>意义如下:</p><pre><code>[root@centos7-1 3306]# tree -L 1.├── auto.cnf               #Mysql自动生成的一些配置文件├── baseinfo            #baseinfo库里的文件【自建库】├── centos7-1.err       #数据库错误日志 命名方式为 主机名+“.err”├── centos7-1.pid       #数据里的进程id文件├── ib_buffer_pool      #一些持久化了的buffer pool文件├── ibdata1             #ibddata文件存储临时表数据+用户数据├── ib_logfile0         #ib_logfile0～N为 redo log日志├── ib_logfile1├── ibtmp1              #临时表空间文件├── mysql               #Mysql库文件├── performance_schema  #performance_schema库文件夹【系统库】├── sys                    #sys库文件夹【系统库】└── test                #自建test库文件夹【自建库】</code></pre><p>我们看到baseinfo库为Innodb存储引擎库,而test为MyISAM存储引擎库, 他们在文件存储上又有不同之处:</p><pre><code>[root@centos7-1 3306]# tree testtest├── db.opt├── t1.frm├── t1.MYD└── t1.MYI0 directories, 4 files[root@centos7-1 3306]# tree baseinfo/baseinfo/├── db.opt├── t_scrm_map.frm├── t_scrm_map.ibd├── t_scrm_pet_info.frm├── t_scrm_pet_info.ibd├── t_scrm_user_info.frm└── t_scrm_user_info.ibd[root@centos7-1 test]# cat db.opt default-character-set=utf8mb4default-collation=utf8mb4_general_ci#db.opt的作用1、create database时会自动生成一个文件db.opt，存放的数据库的默认字符集，show create database时显示数据库默认字符集即db.opt中字符集2、这个文件丢失不影响数据库运行，该文件丢失之后新建表时，找不到数据库的默认字符集，就把character_set_server当成数据库的默认字符集，show create database时显示character_set_server字符集</code></pre><p>可以看到MyISAM库表的文件结构为三个:</p><pre><code>${tablename}.frm   #表结构文件${tablename}.MYI   #表索引文件 MyISAM Index${tablename}.MYD   #表数据文件 MyISAM Data</code></pre><p>而Innodb库表的文件结构为两个:</p><pre><code>${tablename}.frm   #表结构文件${tablename}.idb   #表索引及数据文件</code></pre><p>可以看到在文件存储上 MyISAM和Innodb就有截然不同的结构 从而造成了数据引擎上的巨大差异</p><h2 id="4-3-MySQL运行模式"><a href="#4-3-MySQL运行模式" class="headerlink" title="4.3  MySQL运行模式"></a>4.3  MySQL运行模式</h2><p>MySQL被设计成一个单进程多线程架构的数据库,这一点与SQL Server比较类似,但与Oracle多进程的架构不同</p><p><code>MySQL数据库实例在系统上表现就是一个进程</code></p><p>已Innodb存储引擎为例,包含的后台线程主要有四种（具体含义会在存储引擎章节做解释）:</p><p><img src="http://mysql317.oss-cn-beijing.aliyuncs.com/Mysqld%E8%BF%9B%E7%A8%8B.png" alt=""></p><p>我们可以在mysql中执行以下语句看查看所有mysql的进程数,具体含义在innodb章节解释吧:</p><pre><code class="mysql">mysql&gt; select thread_id,name,type FROM performance_schema.threads;+-----------+----------------------------------------+------------+| thread_id | name                                   | type       |+-----------+----------------------------------------+------------+|         1 | thread/sql/main                        | BACKGROUND ||         2 | thread/sql/thread_timer_notifier       | BACKGROUND ||         3 | thread/innodb/io_ibuf_thread           | BACKGROUND ||         4 | thread/innodb/io_log_thread            | BACKGROUND ||         5 | thread/innodb/io_read_thread           | BACKGROUND ||         6 | thread/innodb/io_read_thread           | BACKGROUND ||         7 | thread/innodb/io_read_thread           | BACKGROUND ||         8 | thread/innodb/io_read_thread           | BACKGROUND ||         9 | thread/innodb/io_write_thread          | BACKGROUND ||        10 | thread/innodb/io_write_thread          | BACKGROUND ||        11 | thread/innodb/io_write_thread          | BACKGROUND ||        12 | thread/innodb/io_write_thread          | BACKGROUND ||        13 | thread/innodb/page_cleaner_thread      | BACKGROUND ||        16 | thread/innodb/srv_lock_timeout_thread  | BACKGROUND ||        17 | thread/innodb/srv_error_monitor_thread | BACKGROUND ||        18 | thread/innodb/srv_monitor_thread       | BACKGROUND ||        19 | thread/innodb/srv_master_thread        | BACKGROUND ||        20 | thread/innodb/srv_worker_thread        | BACKGROUND ||        21 | thread/innodb/srv_purge_thread         | BACKGROUND ||        22 | thread/innodb/srv_worker_thread        | BACKGROUND ||        23 | thread/innodb/srv_worker_thread        | BACKGROUND ||        24 | thread/innodb/buf_dump_thread          | BACKGROUND ||        25 | thread/innodb/dict_stats_thread        | BACKGROUND ||        26 | thread/sql/signal_handler              | BACKGROUND ||        27 | thread/sql/compress_gtid_table         | FOREGROUND ||        36 | thread/sql/one_connection              | FOREGROUND |+-----------+----------------------------------------+------------+26 rows in set (0.00 sec)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.MysqlSQL基础</title>
      <link href="/2020/02/15/5-MysqlSQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/02/15/5-MysqlSQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="5-1-常用数据类型"><a href="#5-1-常用数据类型" class="headerlink" title="5.1 常用数据类型"></a>5.1 常用数据类型</h2><h3 id="5-1-1-整型"><a href="#5-1-1-整型" class="headerlink" title="5.1.1 整型"></a>5.1.1 整型</h3><table><thead><tr><th align="center">类型</th><th align="center">字节</th><th align="center">范围(有符号位)</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">1Byte</td><td align="center">0~2^8 OR  -2^7 ~ 2^7-1</td></tr><tr><td align="center">INT</td><td align="center">4Byte</td><td align="center">0~2^32 OR  -2^31 ~ 2^31-1</td></tr><tr><td align="center">BIGINT</td><td align="center">8Byte</td><td align="center">0~2^64 OR -2^63 ~ 2^63-1</td></tr></tbody></table><ul><li>int(M)  M表示总位数<ul><li>如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改</li><li>例：int(5)   插入一个数’123’，补填后为’00123’</li></ul></li><li>默认存在符号位，unsigned 属性修改</li><li>在满足要求的情况下，越小越好</li><li>1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型</li></ul><h3 id="5-1-2-小数"><a href="#5-1-2-小数" class="headerlink" title="5.1.2 小数"></a>5.1.2 小数</h3><table><thead><tr><th align="center">类型</th><th align="center">字节</th><th align="center">范围(有符号位)</th></tr></thead><tbody><tr><td align="center">float(单精度)</td><td align="center">4Byte</td><td align="center">自定义，表示近似值</td></tr><tr><td align="center">double(双精度)</td><td align="center">8Byte</td><td align="center">自定义，表示近似值</td></tr><tr><td align="center">decimal</td><td align="center">自定义</td><td align="center">自定义,表示精确数值</td></tr></tbody></table><ul><li><p>浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性，不同于整型，前后均会补填0</p></li><li><p>支持科学计数法表示。</p></li><li><p>定义浮点型时，需指定总位数和小数位数。</p><blockquote><p>float(M, D)     double(M, D)</p><p>M表示总位数，D表示小数位数</p><p>M和D的大小会决定浮点数的范围 不同于整型的固定范围</p><p>M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）</p><p>decimal(M, D)   M也表示总位数，D表示小数位数</p><p>保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入<br>将浮点数转换为字符串来保存，每9位数字保存为4个字节</p></blockquote></li></ul><h3 id="5-1-3-字符"><a href="#5-1-3-字符" class="headerlink" title="5.1.3 字符"></a>5.1.3 字符</h3><table><thead><tr><th align="center">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">CHAR</td><td align="left">定长字符串最多255个字符</td></tr><tr><td align="center">VARCHAR</td><td align="left">变长字符串最多65535个字符</td></tr><tr><td align="center">TEXT</td><td align="left">变长字符串最多65535个字符类型，在定义时,不需要定义长度<br/>也不会计算总长度不可给default值</td></tr><tr><td align="center">BLOB</td><td align="left">二进制字符串（字节字符串）</td></tr><tr><td align="center">ENUM</td><td align="left">枚举类型 smallint 存储</td></tr><tr><td align="center">SET</td><td align="left">集合类型 bigint存储</td></tr></tbody></table><pre><code>char(11) ：定长字符串类型,在存储字符串时，最大字符长度11个，立即分配11个字符长度的存储空间，如果存不满，空格填充varchar(11):变长的字符串类型看，最大字符长度11个。在存储字符串时，自动判断字符长度，按需分配存储空间。M表示能存储的最大长度，此长度是字符数，非字节数。不同的编码，所占用的空间不同。char,最多255个字符，与编码无关。varchar,最多65535字符，与编码有关。一条有效记录最大不能超过65535个字节。utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符【注】varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。varchar 的最大有效长度由最大行大小和使用的字符集确定。最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？答：(65535-1-2-4-30*3)/3</code></pre><pre><code>枚举类型说明enum(val1, val2, val3...)在已知的值中进行单选。最大数量为65535.枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。表现为字符串类型，存储却是整型。NULL值的索引是NULL。空字符串错误值的索引值是0枚举类型，比较适合于将来此列的值是固定范围内的特点，可以使用enum,可以很大程度的优化我们的索引结构</code></pre><pre><code class="mysql">集合类型说明set(val1, val2, val3...)create table tab ( gender set(&#39;男&#39;, &#39;女&#39;, &#39;无&#39;) );insert into tab values (&#39;男, 女&#39;);最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式当创建表时，SET成员值的尾部空格将自动被删除</code></pre><h3 id="5-1-4-时间"><a href="#5-1-4-时间" class="headerlink" title="5.1.4 时间"></a>5.1.4 时间</h3><table><thead><tr><th align="center">类型</th><th align="center">字节</th><th align="center">说明</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">datetime</td><td align="center">8Byte</td><td align="center">日期及时间</td><td align="center">1000-01-01 00:00:00 到 9999-12-31 23:59:59</td></tr><tr><td align="center">date</td><td align="center">3Byte</td><td align="center">日期</td><td align="center">1000-01-01 到 9999-12-31</td></tr><tr><td align="center">timestamp</td><td align="center">4Byte</td><td align="center">时间戳</td><td align="center">19700101000000 到 2038-01-19 03:14:07</td></tr><tr><td align="center">time</td><td align="center">3Byte</td><td align="center">时间</td><td align="center">-838:59:59 到 838:59:59</td></tr><tr><td align="center">year</td><td align="center">1Byte</td><td align="center">年份</td><td align="center">1901 - 2155</td></tr></tbody></table><h2 id="5-2-列属性"><a href="#5-2-列属性" class="headerlink" title="5.2 列属性"></a>5.2 列属性</h2><h3 id="5-2-1-PRIMARY"><a href="#5-2-1-PRIMARY" class="headerlink" title="5.2.1 PRIMARY"></a>5.2.1 PRIMARY</h3><ul><li>能唯一标识记录的字段，可以作为主键。</li><li>一个表只能有一个主键。</li><li>主键具有唯一性。</li><li>声明字段时，用 primary key 标识。</li><li>也可以在字段列表之后声明：create table tab ( id int, stu varchar(10), primary key (id));</li><li>主键字段的值不能为null。</li><li>主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。<br>  例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));</li></ul><h3 id="5-2-2-UNIQUE"><a href="#5-2-2-UNIQUE" class="headerlink" title="5.2.2 UNIQUE"></a>5.2.2 UNIQUE</h3><p>唯一索引,使得某字段的值也不能重复。</p><h3 id="5-2-3-NULL"><a href="#5-2-3-NULL" class="headerlink" title="5.2.3 NULL"></a>5.2.3 NULL</h3><ul><li>null不是数据类型，是列的一个属性。</li><li>表示当前列是否可以为null，表示什么都没有。</li><li>null, 允许为空。默认；not null, 不允许为空。</li><li>insert into tab values (null, ‘val’); – 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null</li></ul><h3 id="5-2-4-DEFAULT"><a href="#5-2-4-DEFAULT" class="headerlink" title="5.2.4 DEFAULT"></a>5.2.4 DEFAULT</h3><ul><li>当前字段的默认值。<pre><code class="mysql">#表示强制使用默认值insert into tab values (default, &#39;val&#39;);#表示将当前时间的时间戳 设为默认值create table tab ( add_time timestamp default current_timestamp )</code></pre></li></ul><h3 id="5-2-5-AUTO-INCREMENT"><a href="#5-2-5-AUTO-INCREMENT" class="headerlink" title="5.2.5 AUTO_INCREMENT"></a>5.2.5 AUTO_INCREMENT</h3><ul><li>自动增长约束</li><li>自动增长必须为索引（主键或unique）</li><li>只能存在一个字段为自动增长。</li><li>默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;</li></ul><h3 id="5-2-6-COMMENT"><a href="#5-2-6-COMMENT" class="headerlink" title="5.2.6 COMMENT"></a>5.2.6 COMMENT</h3><p>注释<br>例：create table tab ( id int ) comment ‘注释内容’;</p><h3 id="5-2-7-FOREIGN-KEY"><a href="#5-2-7-FOREIGN-KEY" class="headerlink" title="5.2.7 FOREIGN KEY"></a>5.2.7 FOREIGN KEY</h3><p>外键约束 高并发下不建议使用 ERP中常用</p><h2 id="5-3-表属性"><a href="#5-3-表属性" class="headerlink" title="5.3 表属性"></a>5.3 表属性</h2><h3 id="5-3-1-engine"><a href="#5-3-1-engine" class="headerlink" title="5.3.1 engine"></a>5.3.1 engine</h3><p>使用的存储引擎 建议都是用Innodb</p><h3 id="5-3-2-charset"><a href="#5-3-2-charset" class="headerlink" title="5.3.2 charset"></a>5.3.2 charset</h3><p>使用的字符集 这个参数也可以在列属性里设置,但是不建议这样做,整表设置相同字符集即可</p><p>常用的有:</p><ul><li>utf8 推荐使用** </li><li>utf8mb4 推荐使用***</li><li>gbk</li></ul><p>建议默认使用utf8mb4格式:</p><blockquote><p>MySQL在5.5.3之后增加了utf8mb4的编码，mb4即4-Byte UTF-8 Unicode Encoding，专门用来兼容四字节的unicode。utf8mb4为utf8的超集并兼容utf8，比utf8能表示更多的字符。</p><p>低版本的MySQL支持的utf8编码，最大字符长度为 3 字节，如果遇到 4 字节的字符就会出现错误了。</p><p>常见的四字节就是Emoji 表情（Emoji 是一种特殊的 Unicode 编码，常见于 ios 和 android 手机上），和一些不常用的汉字，以及任何新增的 Unicode 字符等等。</p></blockquote><h2 id="5-4-常用SQL分类"><a href="#5-4-常用SQL分类" class="headerlink" title="5.4 常用SQL分类"></a>5.4 常用SQL分类</h2><ul><li>DDL：数据定义语言</li><li>DML：数据操作语言</li><li>DCL：数据控制语言</li><li>DQL：数据的查询语言</li></ul><h2 id="5-5-DDL语句"><a href="#5-5-DDL语句" class="headerlink" title="5.5 DDL语句"></a>5.5 DDL语句</h2><h3 id="5-5-1-数据库操作"><a href="#5-5-1-数据库操作" class="headerlink" title="5.5.1 数据库操作"></a>5.5.1 数据库操作</h3><pre><code class="mysql"># 创建demo数据库mysql&gt; create database demo charset utf8mb4mysql&gt; create database if not exists demo charset utf8mb4;# 删除demo数据库mysql&gt; drop database demo;mysql&gt; drop database if exists demo;# 修改database字符集mysql&gt; alter database demo charset=utf8;</code></pre><h3 id="5-5-2-表操作"><a href="#5-5-2-表操作" class="headerlink" title="5.5.2 表操作"></a>5.5.2 表操作</h3><pre><code class="mysql"># 创建表CREATE TABLE `t_scrm_user_info`(  `id`          INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,  `user_id`     VARCHAR(32)      NOT NULL COMMENT &#39;用户ID作为唯一标示&#39;,  `user_name`   VARCHAR(32)      NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户姓名&#39;,  `user_sex`    TINYINT(3)       NOT NULL DEFAULT 0 COMMENT &#39;用户性别 0未知 1男 2女&#39;,  `user_mobile` VARCHAR(16)      NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户手机号&#39;,  `user_status` TINYINT(3)       NOT NULL DEFAULT 0 COMMENT &#39;用户状态 0正常 1锁定 -1删除&#39;,  `user_avatar` varchar(256)     NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户头像&#39;,  `create_time` DATETIME         NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,  PRIMARY KEY (`id`),  UNIQUE KEY `UQ_USER_ID` (`user_id`)) ENGINE = InnoDB  DEFAULT CHARSET = utf8mb4 COMMENT =&#39;用户信息表&#39;;# 删除表mysql&gt; drop table t_scrm_user_info;# 重命名表mysql&gt; RENAME TABLE t_scrm_user_info to demo;# 复制表mysql&gt; CREATE table t_scrm_user_info like demo;# 清空表mysql&gt; truncate table t_scrm_user_info;# 添加列——添加update_time列ALTER TABLE t_scrm_user_info ADD update_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;;# 添加列——在user_avatar列后添加user_remark列ALTER TABLE t_scrm_user_info ADD `user_remark` VARCHAR(128) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户备注&#39; AFTER user_avatar;# 更新列mysql&gt; ALTER TABLE t_scrm_user_info MODIFY user_name VARCHAR(64);注意上面语句更新的时候 会把user_name列上的其他属性更新没 如not null属性和comment属性所以建议写成如下：mysql&gt; ALTER TABLE t_scrm_user_info MODIFY user_name VARCHAR(32)      NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户姓名&#39;;# 更新列名mysql&gt; ALTER TABLE t_scrm_user_info CHANGE user_name u_name VARCHAR(32)      NOT NULL DEFAULT &#39;&#39; COMMENT &#39;用户姓名&#39;;# 删除列ALTER TABLE t_scrm_user_info DROP user_avatar;#添加索引ALTER TABLE tbl_name ADD INDEX index_name (column_list): 添加普通索引，索引值可出现多次。#删除索引DROP INDEX [indexName] ON mytable;</code></pre><h2 id="5-6-DML语句"><a href="#5-6-DML语句" class="headerlink" title="5.6 DML语句"></a>5.6 DML语句</h2><pre><code class="mysql"># 插入INSERT INTO t_scrm_user_info(user_id,user_name,user_sex,user_mobile,user_status) VALUES(&quot;123&quot;,&#39;nihao&#39;,1,&#39;18611111111&#39;,&#39;0&#39;),(&quot;345&quot;,&#39;hahah&#39;,1,&#39;18611111111&#39;,&#39;0&#39;);# 更新UPDATE t_scrm_user_info set user_id=&quot;444&quot; WHERE user_id=&quot;123&quot;;# 删除mysql&gt; DELETE FROM t_scrm_user_info where user_id =&quot;444&quot;;# 全表删除mysql&gt; DELETE FROM t_scrm_user_info;与truncate区别delete:         DML操作, 是逻辑性质删除,逐行进行删除,速度慢. 还在文件里 文件大小不会改变        主键继续原来的增长计数truncate:         DDL操作,对与表段中的数据页进行清空,速度快. 从文件里删除 文件大小改变        主键从1开始计数</code></pre><h2 id="5-7-DCL语句"><a href="#5-7-DCL语句" class="headerlink" title="5.7 DCL语句"></a>5.7 DCL语句</h2><pre><code class="mysql"># 管理用户通配符：%表示可以在任意主机使用用户登录数据库【注意】在mysql里面用户的定义为:用户名+主机名【注意】在mysql8.0中添加用户和授权必须是两步进行 不能用一条语句# 添加用户mysql&gt; CREATE USER &#39;read&#39;@&#39;10.15.2.%&#39; identified by &#39;123&#39;;# 删除用户mysql&gt; DROP USER &#39;read&#39;@&#39;10.15.2.%&#39;;#修改用户密码mysql&gt; set password for &#39;read&#39;@&#39;10.15.2.%&#39; = password(&#39;456&#39;);# 授权# 查看授权mysql&gt; show grants for &#39;read&#39;@&#39;10.15.2.%&#39;;+------------------------------------------+| Grants for read@10.15.2.%                |+------------------------------------------+| GRANT USAGE ON *.* TO &#39;read&#39;@&#39;10.15.2.%&#39; |+------------------------------------------+1 row in set (0.00 sec)# 添加授权grant 权限列表 on 数据库.表名  to  &#39;用户名&#39;@&#39;主机名&#39;;mysql&gt; GRANT CREATE,ALTER,DROP,INSERT,UPDATE,DELETE,SELECT ON demo.* TO &#39;read&#39;@&#39;10.15.2.%&#39;;# 授权所有权限mysql&gt; grant all privileges on demo.* to &#39;read&#39;@&#39;10.15.2.%&#39;;# 删除授权revoke 权限列表  on  数据库.表名  from  &#39;用户名&#39;@&#39;主机名&#39;;mysql&gt; revoke DROP,DELETE  on  demo.* from &#39;read&#39;@&#39;10.15.2.%&#39;;# 让授权生效FLUSH PRIVILEGES;</code></pre><h2 id="5-8-DQL语句"><a href="#5-8-DQL语句" class="headerlink" title="5.8 DQL语句"></a>5.8 DQL语句</h2><h3 id="5-8-1-SELECT"><a href="#5-8-1-SELECT" class="headerlink" title="5.8.1 SELECT"></a>5.8.1 SELECT</h3><pre><code class="mysql">SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMITa. select_expr    -- 可以用 * 表示所有字段。        select * from tb;    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）        select stu, 29+25, now() from tb;    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。        - 使用 as 关键字，也可省略 as.        select stu+10 as add10 from tb;b. FROM 子句    用于标识查询来源。    -- 可以为表起别名。使用as关键字。        SELECT * FROM tb1 AS tt, tb2 AS bb;    -- from子句后，可以同时出现多个表。        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。        SELECT * FROM tb1, tb2;    -- 向优化符提示如何选择索引        USE INDEX、IGNORE INDEX、FORCE INDEX        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;c. WHERE 子句    -- 从from获得的数据源中进行筛选。    -- 整型1表示真，0表示假。    -- 表达式由运算符和运算数组成。        -- 运算数：变量（字段）、值、函数返回值        -- 运算符：            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor            is/is not 加上ture/false/unknown，检验某个值的真假            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较d. GROUP BY 子句, 分组子句    GROUP BY 字段/别名 [排序方式]    分组后会进行排序。升序：ASC，降序：DESC    以下[合计函数]需配合 GROUP BY 使用：    count 返回不同的非NULL值数目  count(*)、count(字段)    sum 求和    max 求最大值    min 求最小值    avg 求平均值    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。e. HAVING 子句，条件子句    与 where 功能、用法相同，执行时机不同。    where 在开始时执行检测数据，对原数据进行过滤。    having 对筛选出的结果再次进行过滤。    having 字段必须是查询出来的，where 字段必须是数据表存在的。    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。    where 不可以使用合计函数。一般需用合计函数才会用 having    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。f. ORDER BY 子句，排序子句    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...    升序：ASC，降序：DESC    支持多个字段的排序。g. LIMIT 子句，限制结果数量子句    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。    limit 起始位置, 获取条数    省略第一个参数，表示从索引0开始。limit 获取条数h. DISTINCT, ALL 选项    distinct 去除重复记录    默认为 all, 全部记录</code></pre><h3 id="5-8-2-多表查询"><a href="#5-8-2-多表查询" class="headerlink" title="5.8.2 多表查询"></a>5.8.2 多表查询</h3><p>多表查询使用join关键字进行连接</p><p>连接方式分为四种:</p><ul><li>INNER JOIN：如果表中有至少一个匹配，则返回行</li><li>LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行</li><li>RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行</li><li>FULL JOIN：只要其中一个表中存在匹配，则返回行</li></ul><p>这里不详细介绍 看图理解</p><p><img src="http://mysql317.oss-cn-beijing.aliyuncs.com/sql-join.png" alt=""></p><p>也可参考此篇<a href="https://www.runoob.com/sql/sql-join.html" target="_blank" rel="noopener">文档</a></p><h3 id="5-8-3-SHOW"><a href="#5-8-3-SHOW" class="headerlink" title="5.8.3 SHOW"></a>5.8.3 SHOW</h3><pre><code class="mysql">show  databases;                          #查看所有数据库show tables;                              #查看当前库的所有表SHOW TABLES FROM                          #查看某个指定库下的表show create database world                #查看建库语句show create table world.city              #查看建表语句show  grants for  root@&#39;localhost&#39;        #查看用户的权限信息show  charset；                            #查看字符集show collation                             #查看校对规则show processlist;                          #查看数据库连接情况show index from                            #表的索引情况show status                                 #数据库状态查看SHOW STATUS LIKE &#39;%lock%&#39;;                 #模糊查询数据库某些状态SHOW VARIABLES                             #查看所有配置信息SHOW variables LIKE &#39;%lock%&#39;;              #查看部分配置信息show engines                                #查看支持的所有的存储引擎show engine innodb status                  #查看InnoDB引擎相关的状态信息show binary logs                            #列举所有的二进制日志show master status                           #查看数据库的日志位置信息show binlog events;                          #查看二进制日志事件show slave status                           #查看从库状态SHOW RELAYLOG EVENTS                        #查看从库relaylog事件信息desc  (show colums from city)               #查看表的列定义信息</code></pre><h3 id="5-8-4其它关键字"><a href="#5-8-4其它关键字" class="headerlink" title="5.8.4其它关键字"></a>5.8.4其它关键字</h3><pre><code class="mysql"># distinct：去重复SELECT countrycode FROM city ;SELECT DISTINCT(countrycode) FROM city  ;# 联合查询- union allSELECT * FROM city WHERE countrycode IN (&#39;CHN&#39; ,&#39;USA&#39;);SELECT * FROM city WHERE countrycode=&#39;CHN&#39;UNION ALLSELECT * FROM city WHERE countrycode=&#39;USA&#39;# 联合查询- union SELECT * FROM city WHERE countrycode=&#39;CHN&#39;UNION SELECT * FROM city WHERE countrycode=&#39;USA&#39;说明:一般情况下,我们会将 IN 或者 OR 语句 改写成 UNION (ALL),来提高性能UNION     去重复UNION ALL 不去重复</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Mysql安装及初始化</title>
      <link href="/2020/02/14/3-Mysql%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2020/02/14/3-Mysql%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>环境:Centos8 64位<br>版本:5.7.26 通用二级制版本<br>下载地址:   <a href="https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz" target="_blank" rel="noopener">https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz</a></p><h2 id="3-1-下载通用二进制包"><a href="#3-1-下载通用二进制包" class="headerlink" title="3.1 下载通用二进制包"></a>3.1 下载通用二进制包</h2><pre><code class="shell">[root@localhost Downloads]# wget  https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz</code></pre><h2 id="3-2-创建用户用户"><a href="#3-2-创建用户用户" class="headerlink" title="3.2 创建用户用户"></a>3.2 创建用户用户</h2><pre><code>[root@localhost ken]# useradd mysql</code></pre><h2 id="3-3-创建相应文件夹"><a href="#3-3-创建相应文件夹" class="headerlink" title="3.3 创建相应文件夹"></a>3.3 创建相应文件夹</h2><pre><code>#创建数据存放目录[root@localhost ken]# mkdir -p /data/3306#创建mysql程序存放的目录[root@localhost ken]# mkdir -p /app/database#创建日志存放的目录[root@localhost ken]# mkdir -p /log/3306</code></pre><h2 id="3-4-更改所属目录"><a href="#3-4-更改所属目录" class="headerlink" title="3.4 更改所属目录"></a>3.4 更改所属目录</h2><pre><code>[root@localhost ken]# chown -R mysql.mysql /data/3306  /app/database/ /log/3306/</code></pre><h2 id="3-5-解压mysql并放到指定目录"><a href="#3-5-解压mysql并放到指定目录" class="headerlink" title="3.5 解压mysql并放到指定目录"></a>3.5 解压mysql并放到指定目录</h2><pre><code>[ken@localhost Downloads]$ tar -zxvf mysql-5.7.26-linux-glibc2.12-i686.tar.gz [ken@localhost Downloads]$ lsmysql-5.7.26-linux-glibc2.12-i686  mysql-5.7.26-linux-glibc2.12-i686.tar.gz[ken@localhost Downloads]$ sudo mv mysql-5.7.26-linux-glibc2.12-i686 /app/database/mysql[ken@localhost Downloads]$ sudo chown -R mysql.mysql /app/database/mysql</code></pre><h2 id="3-6设置环境变量"><a href="#3-6设置环境变量" class="headerlink" title="3.6设置环境变量"></a>3.6设置环境变量</h2><pre><code>[ken@localhost ~]$ suPassword: [root@localhost ken]# echo &quot;export PATH=/app/database/mysql/bin:$PATH&quot; &gt;&gt; /etc/profile[root@localhost ken]# exitexit[ken@localhost ~]$ source /etc/profile#显示以下内容即可完成此安装步骤[ken@localhost bin]$ mysql -Vmysql  Ver 14.14 Distrib 5.7.26, for linux-glibc2.12 (x86_64) using  EditLine wrapper【注意】在centos8中 经常会报libncurses.so.5这个文件不存在 但是已经安装了libncurses库还是有报错的话主要是再ceontos中有它的升级版文件/lib64/libncurses.so.6.1 我们做一个软连接即可ln -s /lib64/libncurses.so.6.1 /lib64/libncurses.so.5</code></pre><h2 id="3-7-初始化Mysql"><a href="#3-7-初始化Mysql" class="headerlink" title="3.7 初始化Mysql"></a>3.7 初始化Mysql</h2><pre><code>[root@localhost ken]# mysqld --initialize-insecure --user=mysql --basedir=/app/database/mysql --datadir=/data/3306</code></pre><h2 id="3-8-配置文件设置"><a href="#3-8-配置文件设置" class="headerlink" title="3.8 配置文件设置"></a>3.8 配置文件设置</h2><pre><code>cat &gt; /etc/my.cnf &lt;&lt;EOF[mysqld]user=mysqlbasedir=/app/database/mysqldatadir=/data/3306socket=/tmp/mysql3306.sock[mysql]socket=/tmp/mysql3306.sockEOF</code></pre><h2 id="3-9-准备Mysql启动脚本"><a href="#3-9-准备Mysql启动脚本" class="headerlink" title="3.9 准备Mysql启动脚本"></a>3.9 准备Mysql启动脚本</h2><pre><code>root@localhost support-files]# pwd/app/database/mysql/support-files[root@localhost support-files]# cp mysql.server /etc/init.d/mysqld[root@localhost support-files]# service mysqld startStarting MySQL. SUCCESS! </code></pre><h2 id="3-10-验证是否可以连接成功"><a href="#3-10-验证是否可以连接成功" class="headerlink" title="3.10 验证是否可以连接成功"></a>3.10 验证是否可以连接成功</h2><pre><code>[root@localhost support-files]# mysqlWelcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.26 MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.mysql&gt; </code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Mysql产品线</title>
      <link href="/2020/02/13/2-Mysql%E4%BA%A7%E5%93%81%E7%BA%BF/"/>
      <url>/2020/02/13/2-Mysql%E4%BA%A7%E5%93%81%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-Mysql主流厂家"><a href="#2-1-Mysql主流厂家" class="headerlink" title="2.1 Mysql主流厂家"></a>2.1 Mysql主流厂家</h2><ul><li>Oracle:MySQL官方版</li><li>红帽 :MariaDB</li><li>Percona: PerconaDB</li><li>阿里云做的也很好</li></ul><h2 id="2-2-Mysql主流版本"><a href="#2-2-Mysql主流版本" class="headerlink" title="2.2 Mysql主流版本"></a>2.2 Mysql主流版本</h2><ul><li>5.6—–5.6.36 5.6.38 5.6.40 5.6.46</li><li>5.7—–5.7.20 5.7.22 5.7.24 5.7.28</li><li>8.0—–8.0.11</li></ul><p><code>建议选择GA稳定版下半年发布的产品</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.数据库分类及实例介绍</title>
      <link href="/2020/02/12/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%B1%BB%E5%8F%8A%E5%AE%9E%E4%BE%8B%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/02/12/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%B1%BB%E5%8F%8A%E5%AE%9E%E4%BE%8B%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>我们可以从 <a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener">https://db-engines.com/en/ranking</a>  这个网站查看数据库在互联网上的<code>流行程度</code>:<br><img src="http://mysql317.oss-cn-beijing.aliyuncs.com/database.png" alt="数据库流行程度"></p><h2 id="1-1-关系型数据库"><a href="#1-1-关系型数据库" class="headerlink" title="1.1 关系型数据库"></a>1.1 关系型数据库</h2><p>英文简称为RDMS,最常见的数据库,其核心思想是将复杂的数据结构归结成简单的二元关系<br>常见的关系型数据库为:Mysql,SqlServer,Oracle</p><h2 id="1-2-键值存储数据库"><a href="#1-2-键值存储数据库" class="headerlink" title="1.2  键值存储数据库"></a>1.2  键值存储数据库</h2><p>键值数据库是一种非关系数据库，它使用简单的键值方法来存储数据<br>键值数据库将数据存储为键值对集合，其中键作为唯一标识符<br>常见的键值存储数据库为：Redis和memcached</p><h2 id="1-3-列存储数据库"><a href="#1-3-列存储数据库" class="headerlink" title="1.3 列存储数据库"></a>1.3 列存储数据库</h2><p>列式存储(column-based)是相对于传统关系型数据库的行式存储(Row-basedstorage)来说的<br>简单来说两者的区别就是对表中数据的存储形式的差异<br>常见的列存储数据库为：HBase</p><h2 id="1-4-面向文档数据库"><a href="#1-4-面向文档数据库" class="headerlink" title="1.4 面向文档数据库"></a>1.4 面向文档数据库</h2><p>此类数据库可存放并获取文档，可以是XML、JSON、BSON等格式，这些文档具备可述性（self-describing），呈现分层的树状结构（hierarchical tree data structure），可以包含映射表、集合和纯量值。数据库中的文档彼此相似，但不必完全相同。文档数据库所存放的文档，就相当于键值数据库所存放的“值”。文档数据库可视为其值可查的键值数据库。<br>常见的面向文档数据库为：MongoDB</p><h2 id="1-5-图形数据库"><a href="#1-5-图形数据库" class="headerlink" title="1.5 图形数据库"></a>1.5 图形数据库</h2><p>故名思意就是存储图形关系的数据库,也是Nosql的一种<br>常见的图形数据库为:Neo4J、ArangoDB、OrientDB、FlockDB、GraphDB、InfiniteGraph、Titan和Cayley等</p><h2 id="1-6-搜索引擎存储"><a href="#1-6-搜索引擎存储" class="headerlink" title="1.6 搜索引擎存储"></a>1.6 搜索引擎存储</h2><p>搜索引擎数据库是应用在搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检索的时候才能保证性能最优。<br>常见的搜索引擎存储为:Elasticsearch,solr</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
